[tool.poetry]
name = "lmdb-sortedset"
version = "0.1.0"
description = "LMDB-based sorted set implementation with Redis-compatible API"
authors = ["Prashant Gaur <91prashantgaur@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/pygaur/lmdb-sortedset"
repository = "https://github.com/pygaur/lmdb-sortedset"
documentation = "https://github.com/pygaur/lmdb-sortedset"
keywords = ["lmdb", "sortedset", "redis", "database", "storage"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
packages = [{include = "lmdb_sortedset"}]

[tool.poetry.dependencies]
python = "^3.8"
lmdb = "^1.4.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
black = "^23.0.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=lmdb_sortedset --cov-report=term-missing --cov-report=html"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.coverage.run]
source = ["lmdb_sortedset"]
omit = ["*/tests/*", "*/examples/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]


